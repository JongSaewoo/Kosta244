package com.my.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.my.dto.Board;
import com.my.dto.PageBean;
import com.my.exception.AddException;
import com.my.exception.FindException;
import com.my.exception.ModifyException;
import com.my.exception.RemoveException;
import com.my.repository.BoardRepository;

@Service
public class BoardService {
	private static final int CNT_PER_PAGE=3; //페이지별 보여줄 목록수
	
	@Autowired
	private BoardRepository repository;
	
	/**
	 * 페이지별 게시글 목록과 페이지그룹정보를 반환한다 
	 * @param currentPage 검색할 페이지
	 * @return
	 * @throws FindException
	 */
	public PageBean<Board> boardList(int currentPage) throws FindException {
		List<Board> list = repository.selectByPage(currentPage, CNT_PER_PAGE);
		int totalCnt = repository.selectCount();  //총 행수
		
		int cntPerPageGroup = 2;
		
		PageBean<Board> pb1 = new PageBean<>(list, totalCnt, currentPage, cntPerPageGroup, CNT_PER_PAGE);
		
		return pb1;
	}
	
	/**
	 * 검색어를 이용한 게시글 검색 목록과 페이지 그룹정보를 반환한다
	 * @param word 검색어
	 * @param currentPage 검색할 페이지
	 * @return
	 * @throws FindException
	 */
	public PageBean<Board> searchBoard(String word, int currentPage) throws FindException {
		List<Board> list = repository.selectByWord(word, currentPage, CNT_PER_PAGE);
		int totalCnt = repository.selectCount(word);
		int cntPerPageGroup = 2;
		PageBean<Board> pb1 = new PageBean<>(list, totalCnt, currentPage, cntPerPageGroup, CNT_PER_PAGE);
		return pb1;
	}
	
	/**
	 * 게시글번호의 조회수를 1 증가한다
	 * 게시글번호의 게시글을 반환한다
	 * @param boardNo 게시글번호
	 * @return
	 * @throws FindException
	 */
	public Board veiwBoard(int boardNo) throws FindException{
		try {
			//조회수를 1 증가한다
			Board b = new Board();
			b.setBoardNo(boardNo);
			b.setBoardViewcount(-1);
//			repository.update(b);
			repository.save(null);
			
			//게시글번호의 게시글 조회한다
//			Board b1 = repository.selectByBoardNo(boardNo);
			Optional<Board> optB = repository.findById(boardNo);
			if(optB.isPresent()) {
				Board b1 = optB.get();
				return b1;
			}else {
				throw new FindException("게시글이 없습니다");
			}
		} catch (ModifyException e) {
			e.printStackTrace();
			throw new FindException(e.getMessage());
		}
	}
	
	/**
	 * 글쓰기
	 * @param board
	 * @throws AddException
	 */
	public void writeBoard(Board board) throws AddException{
		board.setBoardParentNo(0);
		repository.insert(board);
	}

	/**
	 * 게시물 수정
	 * @param board
	 * @throws ModifyException
	 */
	public void modifyBoard(Board board) throws ModifyException {
		repository.update(board);
	}
	
	/**
	 * 게시물 삭제
	 * @param boardNo
	 * @throws RemoveException
	 */
	public void removeBoard(int boardNo) throws RemoveException {
		repository.delete(boardNo);
	}
	
	/**
	 * 답글쓰기
	 * @param board
	 * @throws AddException
	 */
	public void replyBoard(Board board) throws AddException{
		if(board.getBoardParentNo() == 0) {
			throw new AddException("답글쓰기의 부모글번호가 없습니다");
		}
		repository.insert(board);
	}
}
