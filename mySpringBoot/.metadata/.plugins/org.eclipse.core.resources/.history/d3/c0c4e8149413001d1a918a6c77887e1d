package com.example.demo.repository;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.example.demo.entity.A;

@SpringBootTest
//@Transactional //자동커밋을 막고 롤백시켜줌
class ARepositoryTest {
	@Autowired
	private ARepository repository;
	
	Logger logger = LoggerFactory.getLogger(getClass());
	
	@Test
//	@Transactional
	void testSave() {
		A a = new A();
		a.setA1("1"); 
		a.setA2(new BigDecimal(1.0));
//		a.setA3(null);
		a.setA4("a4-1");
		repository.save(a); 
		//Hibernate: select (JPA의 find()메서드호출 : 객체가 자동 managed상태)
		//Hibernate: insert (JPA의 persist()메서드호출 : new로 객체생성할때 부터 자동 managed상태로 바뀜)
		
		A aa = new A();
		aa.setA1("1");
		aa.setA2(new BigDecimal(2));
		aa.setA4("a4-2");
		repository.save(aa); 
		//Hibernate: select (JPA의 find()메서드호출 : 객체가 자동 managed상태)
		//Hibernate: update (JPA의 persist()메서드 호출 : new로 객체생성할때 부터 자동 managed상태유지
		//           a.set에서 새로운 aa.set이 실행되면서 detached상태였던 a.set이
		//           aa.set으로 UPDATE구문 실행)
		
		A aaa = new A();
		aaa.setA1("3");
		aaa.setA2(new BigDecimal(3));
		aaa.setA4("a4-3");
		repository.save(aaa);
	}
	
	@Test
//	@Transactional
	void testFindById() {
		Optional<A> optA = repository.findById("1");
		assertTrue(optA.isPresent()); 
		String expectedA4 = "a4-2";
		A a = optA.get();
		assertEquals(expectedA4, a.getA4());
	}
	
	@Test
	void testDeleteById() {
		repository.deleteById("1");
		
//		Optional<A> optA = repository.findById("1");
//		assertFalse(optA.isPresent());
		
		repository.existsById("1");
	}
	
	@Test
	void testFindAll() {
		Iterable<A> list = repository.findAll();
		logger.error(list.toString());
	}
	
	//쿼리메서드
	@Test
	void testFindByA4() {
		Iterable<A> list = repository.findByA4("a4_3");
		logger.error(list.toString());
	}
	
	@Test
	void testCount() {
		long cnt = repository.count();
		logger.error("총 행수 : " + cnt);
	}
	
	//쿼리메서드
	@Test
	void testFindByA4Like() {
		List<A> list = repository.findByA4Like("%a%");
		logger.error(list.toString());
	}
}
