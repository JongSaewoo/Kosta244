package com.my.repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.my.dto.Product;
import com.my.exception.AddException;
import com.my.exception.FindException;

@Repository(value="productRepository")
public class ProductOracleRepository implements ProductRepository {
//	@Autowired	//생성자를 생성하지않아도 자동으로 의존성 주입됨 
//	@Qualifier(value="dataSource")
//	private DataSource ds;

	@Autowired
	private SqlSessionFactory sqlSessionFactory;
	
	//로그 라이브러리 : postman이런 툴로 검증하기 어려운 더 세부적인 메소드검증은
	// 			   로그를 이용하여 검증한다 
	private Logger logger = Logger.getLogger(this.getClass());


	//	public ProductOracleRepository() {
	//		
	//	}
	//	
	//	public ProductOracleRepository(DataSource ds) {
	//		this.ds = ds;
	//	}

	@Override
	public void insert(Product product) throws AddException {
		// TODO Auto-generated method stub

	}

	@Override
	public List<Product> selectAll() throws FindException {
		List<Product> products = new ArrayList<>();
		SqlSession session = null;
		try {
			session = sqlSessionFactory.openSession();
			products = session.selectList("com.my.mapper.ProductMapper.selectAll");
			if (products.size() == 0) {
				throw new FindException("상품이 없습니다");
			}
			return products;
		} catch (Exception e) {
			e.printStackTrace();
			throw new FindException(e.getMessage());
		} finally {
			if (session != null) {
				session.close();
			}
		}
	}

	@Override
	public Product selectByProdNo(String prodNo) throws FindException {
		SqlSession session = null;
		try {
			//System.out.println("SYSOUT : prodNo in productoraclerepository selectByProdNo:" + prodNo);

			session = sqlSessionFactory.openSession();
			Product p = session.selectOne("com.my.mapper.ProductMapper.selectByProdNo", prodNo);
			if(p == null) {
				throw new FindException("상품이 없습니다");
			}
			return p;
		} catch (Exception e) {
			e.printStackTrace();
			throw new FindException(e.getMessage());
		} finally {
			if(session != null) {
				session.close();
			}
		}
	}

	@Override
	public List<Product> selectByProdNoOrProdName(String word) throws FindException {
		List<Product> products = new ArrayList<>();
		SqlSession session = null;
		try {
			session = sqlSessionFactory.openSession();
			HashMap<String, String> hashMap = new HashMap<>();  // 맵퍼에 order by쓰기 위해 hashMap을 씀
			hashMap.put("word", word); 
			hashMap.put("order", "prod_name DESC"); 
			products = session.selectList("com.my.mapper.ProductMapper.selectByProdNoOrProdName", 
					//"%" + word + "%");
					//word);
					hashMap);
			return products;
		} catch(Exception e) {
			e.printStackTrace();
			throw new FindException(e.getMessage());
		} finally {
			if(session != null) {
				session.close();
			}
		}
	}

}
